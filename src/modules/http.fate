import 'node:http' as http

from 'node:url' import parse as parseURL
from 'node:welsh' import Promise

from './support' import make, mutable
from '../Util' import mixin

from pattern import Something, NonEmptyString

# Warning: this module assumes JavaScript-specific methods
#
#   The Welsh promise module
#   Node's 'url' module
#   Node's 'http' module

let URL = NonEmptyString

let RequestOptions = ~{
  hostname: NonEmptyString,
  method: self in ['GET', 'HEAD', 'POST', 'PUT', 'DELETE', 'PATCH']
}

let streamConsumer = (resolve -> stream ->
  let content = mutable('') # oh, no, a mutable!
  stream.on('data',  data -> content.value + data | content.set)
        .on('end',   -> [content.value] | resolve)
        .on('error', err -> [content.value, err] | resolve)
)

def request(RequestOptions as options, content)
  make(Promise, (resolve) ->
    let req = http.request(options, resolve | streamConsumer)
    req.on('error', err -> ['', err] | resolve)
    req.write(content) if content like Something
    req.end()
  )
end

export def get(URL as url)
  mixin(url | parseURL, { method: 'GET' }) | request
end
