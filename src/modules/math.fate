from './support' import Math

export from './support' import Number as number

from pattern import ArrayOf, Number, MinLength

# Warning: this module assumes JavaScript-specific methods
#
#   Basically everything from JavaScript's Math module

export from '../generator' import createRangeGenerator as range

let numberSort = (left, right → left - right)
let NumberArray = ArrayOf(Number) && MinLength(1)

export def sum(NumberArray as values)
  reduce result = 0
  for value in values
  select result + value
end

export def avg(values)
  sum(values) ÷ values.length
end

export def max(NumberArray as values)
  Math.max.apply(Math, values)
end

export def median(NumberArray as values)
  let temp = values.slice(0).sort(numberSort)
  let len = temp.length
  return temp[((len + 1) ÷ 2) - 1] if len mod 2 != 0

  let mid = len ÷ 2
  (temp[mid - 1] + temp[mid]) ÷ 2
end

export def min(NumberArray as values)
  Math.min.apply(Math, values)
end

# Math functions

def NumberFunc(func)
  def wrapper(Number as value)
    func(value)
  end
end

def NumberFunc2(func)
  def wrapper(Number as x, Number as y)
    func(x, y)
  end
end

# `abs(value)` returns the absolute value
export let abs = Math.abs | NumberFunc
# `acos(value)` returns the arc-cosine of value (in radians)
export let acos = Math.acos | NumberFunc
# `asin(value)` returns the arc-sine of value (in radians)
export let asin = Math.asin | NumberFunc
# `atan(value)` returns the arc-tangent of value (in radians)
export let atan = Math.atan | NumberFunc
# `atan2(x,y)` returns the arc-tangent of the coords
export let atan2 = Math.atan2 | NumberFunc2
# `ceil(value)` rounds to the next highest integer
export let ceil = Math.ceil | NumberFunc
# `cos(value)` returns the cosine of value (in radians)
export let cos = Math.cos | NumberFunc
# `exp(x)` returns E to the power of x
export let exp = Math.exp | NumberFunc
# `floor(value)` rounds to the next lowest integer
export let floor = Math.floor | NumberFunc
# `log(value)` returns the natural logarithm
export let log = Math.log | NumberFunc
# `pow(x,y)` returns x raised to the power of y
export let pow = Math.pow | NumberFunc2
# `random()` returns a random number (0 ≤ x < 1)
export let random = Math.random | NumberFunc
# `round(value)` rounds up or down to the closest integer
export let round = Math.round | NumberFunc
# `sin(value)` returns the sine of value (in radians)
export let sin = Math.sin | NumberFunc
# `sqrt(value)` returns the square root
export let sqrt = Math.sqrt | NumberFunc
# `tan(value)` returns the tangent of value (in radians)
export let tan = Math.tan | NumberFunc

# ### Constants

# `E` is Euler's Number
export let E = Math.E
# `LN2` is the Natural Logarithm of 2
export let LN2 = Math.LN2
# `LN10` is the Natural Logarithm of 10
export let LN10 = Math.LN10
# `LOG2E` is the Base-2 Logarithm of E
export let LOG2E = Math.LOG2E
# `LOG10E` is the Base-10 Logarithm of E
export let LOG10E = Math.LOG10E
# `PI` is Pi
export let PI = Math.PI
# `SQRT1_2` is the Square Root of 1/2
export let SQRT1_2 = Math.SQRT1_2
# `SQRT2` is the Square Root of 2
export let SQRT2 = Math.SQRT2
