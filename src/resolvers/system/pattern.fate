from '../../Types' import isObject, isArray

from '../../runtime/Pattern'
import isPattern, definePattern

export from '../../runtime/Pattern'
import isNothing as Nothing
     , isSomething as Something

from './support' import isA

# Warning: this module assumes JavaScript-specific methods

export let String = ~isA(self, 'string')
export let EmptyString = ~(self = "")

export let NonEmptyString = ~(
  isA(self, 'string') and self.length > 0
)

export let Number = ~isA(self, 'number')
export let PositiveNumber = ~(isA(self, 'number') and self > 0)
export let NegativeNumber = ~(isA(self, 'number') and self < 0)
export let Integer = ~(isA(self, 'number') and self mod 1 = 0)

export let PositiveInteger = ~(
  isA(self, 'number') and self > 0 and self mod 1 = 0
)

export let NegativeInteger = ~(
  isA(self, 'number') and self < 0 and self mod 1 = 0
)

export let Array = definePattern(isArray)
export let Object = definePattern(isObject)

export let Boolean = ~isA(self, 'boolean')
export let EmptyArray = ~(not isArray(self) or self.length = 0)

export def ArrayOf(elementPattern)
  return Array unless isPattern(elementPattern)

  definePattern(value ->
    return false unless isArray(value) and value.length > 0

    [
      for item in value
      where not elementPattern(item)
    ].length = 0
  )
end
