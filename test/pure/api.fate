import nodeunit

from pattern import Nothing, Something
from test import wrap
from value import null, undefined

import '../../dist/runtime' as runtime

def trueFalse(test)
  let { isFalse, isTrue } = wrap(test)

  runtime.isTrue(Nothing)           | isTrue
  runtime.isTrue(Something)         | isTrue
  runtime.isTrue(null)              | isFalse
  runtime.isTrue(undefined)         | isFalse
  runtime.isTrue()                  | isFalse
  runtime.isTrue([])                | isTrue
  runtime.isTrue({})                | isTrue
  runtime.isTrue(0)                 | isTrue
  runtime.isTrue({ name: 'fate' })  | isTrue
  runtime.isTrue("hello")           | isTrue
  runtime.isTrue([1])               | isTrue
  runtime.isFalse(Nothing)          | isFalse
  runtime.isFalse()                 | isTrue
  runtime.isFalse([])               | isFalse
  runtime.isFalse({})               | isFalse
  runtime.isFalse(0)                | isFalse
  runtime.isFalse({ name: 'fate' }) | isFalse
  runtime.isFalse("hello")          | isFalse
  runtime.isFalse([1])              | isFalse
  test.done()
end

def somethingNothing(test)
  let { isFalse, isTrue } = wrap(test)

  runtime.isSomething(null)      | isFalse
  runtime.isSomething(undefined) | isFalse
  runtime.isSomething(Something) | isTrue
  runtime.isSomething("hello")   | isTrue
  runtime.isSomething(false)     | isTrue
  runtime.isNothing(null)        | isTrue
  runtime.isNothing(undefined)   | isTrue
  runtime.isNothing(Nothing)     | isTrue
  runtime.isNothing("hello")     | isFalse
  runtime.isNothing(false)       | isFalse
  test.done()
end

export let tests = nodeunit.testCase({
  "True / False": trueFalse,
  "Something / Nothing": somethingNothing
})
