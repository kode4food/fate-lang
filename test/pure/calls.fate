import nodeunit

from io import timeout
from test import wrap

let data = {
  "name": ["title", "case"],
  "people": [
    { name: 'Bill', age: 19 },
    { name: 'Fred', age: 42 },
    { name: 'Bob', age: 99 }
  ]
}

def leftCalls(test)
  let { equalTo } = wrap(test)

  from string import title
  from array import join
  let formatted = title(join(data.name))
  let result = { formatted } | "Hello, %formatted!"

  result | equalTo("Hello, Title Case!")
  test.done()
end

def rightCalls(test)
  let { equalTo } = wrap(test)

  from string import title
  from array import join
  let formatted = data.name | join | title
  let result1 = { formatted } | "Hello, %formatted!"

  let result2 = ['hello', 'there'] | '%1-%0'

  result1 | equalTo("Hello, Title Case!")
  result2 | equalTo("there-hello")
  test.done()
end

def composedCalls(test)
  let { equalTo } = wrap(test)

  let addOne = x -> x + 1,
      mulTen = x -> x * 10,
      prefixHello = x -> 'Hello ' + x

  let composed = addOne âˆ˜ mulTen o prefixHello

  2 | composed | equalTo('Hello 30')
  test.done()
end

def awaitCalls(test)
  let { equalTo, deepEqualTo } = wrap(test)

  let double = (arr -> do: [for a in arr select a * 2])
  let timeouts = (arr -> [for a in arr select timeout(a)])

  do
    [100, 250, 300] | timeouts :| double .| deepEqualTo([200, 500, 600])

    [200, 250, 400] | timeouts
                  : | double
                  . | deepEqualTo([400, 500, 800])

    [100, 250, 300] | timeouts ?| (x -> x * 2) .| equalTo(200)

    [250, 150, 300] | timeouts ?
                    | (x -> x * 2) .
                    | equalTo(300)

    test.done()
  end
end

def recursiveCalls(test)
  let { equalTo } = wrap(test)

  def callMe(x)
    if x > 0
      x + ', ' + callMe(x-1)
    else
      'liftoff'
    end
  end

  def alsoMe(x)
    def shouldBeIgnored(x)
      self(x)
    end

    if x > 0
      x + ', ' + self(x-1)
    else:
      'liftoff'
  end

  callMe(10) | equalTo('10, 9, 8, 7, 6, 5, 4, 3, 2, 1, liftoff')
  alsoMe(8)  | equalTo('8, 7, 6, 5, 4, 3, 2, 1, liftoff')
  test.done()
end

export let tests = nodeunit.testCase({
  "Left Function Calls": leftCalls,
  "Right Piped Calls": rightCalls,
  "Composed Calls": composedCalls,
  "Awaiting Calls": awaitCalls,
  "Recursive Calls": recursiveCalls
})
