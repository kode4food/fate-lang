import nodeunit

let data = {
  "name": ["title", "case"],
  "people": [
    { name: 'Bill', age: 19 },
    { name: 'Fred', age: 42 },
    { name: 'Bob', age: 99 }
  ]
}

def leftCalls(test)
  from string import title
  from array import join
  let formatted = title(join(data.name))
  let result = { formatted } | "Hello, %formatted!"

  test.equal(result, "Hello, Title Case!")
  test.done()
end

def rightCalls(test)
  from string import title
  from array import join
  let formatted = data.name | join | title
  let result1 = { formatted } | "Hello, %formatted!"

  let result2 = ['hello', 'there'] | '%1-%0'

  test.equal(result1, "Hello, Title Case!")
  test.equal(result2, "there-hello")
  test.done()
end

def recursiveCalls(test)
  def callMe(x)
    if x > 0
      x + ', ' + callMe(x-1)
    else
      'liftoff'
    end
  end

  def alsoMe(x)
    def shouldBeIgnored(x)
      self(x)
    end

    if x > 0
      x + ', ' + self(x-1)
    else
      'liftoff'
    end
  end

  test.equal(callMe(10), '10, 9, 8, 7, 6, 5, 4, 3, 2, 1, liftoff')
  test.equal(alsoMe(8), '8, 7, 6, 5, 4, 3, 2, 1, liftoff')
  test.done()
end

let tests = nodeunit.testCase({
  "Left Function Calls": leftCalls,
  "Right Piped Calls": rightCalls,
  "Recursive Calls": recursiveCalls
})

export tests
