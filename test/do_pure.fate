import nodeunit

from pattern import NonEmptyString
from test import equalTo, deepEqualTo, isOk
import http

def basics(test)
  let x = do
    await timeout(200)
    'hello'
  end

  do
    await x | equalTo("hello")
    test.done()
  end
end

def doWhenSimple(test)
  do when t = 100
    t | equalTo(100)
    test.done()
  end
end

def doWhenNoDependencies(test)
  do when a = timeout(10), b = timeout(200), [c, d] = [90, 80]
    a | equalTo(10)
    b | equalTo(200)
    c | equalTo(90)
    d | equalTo(80)
    test.done()
  end
end

def doWhenDependencies(test)
  do when a = timeout(10), b = timeout(a * 20), [c, d] = [90, 80],
          e = timeout(30 * a), [f] = [c]
    a | equalTo(10)
    b | equalTo(200)
    c | equalTo(90)
    d | equalTo(80)
    e | equalTo(300)
    f | equalTo(90)
    test.done()
  end
end

def awaitAny(test)
  let arr = [
    for x in [100, 10, 50]
    select x | timeout
  ]

  do
    await any arr | equalTo(10)
    test.done()
  end
end

def awaitAll(test)
  let arr = [
    for x in [100, 10, 50]
    select x | timeout
  ]

  do
    await all arr | deepEqualTo([100, 10, 50])
    test.done()
  end
end

# TODO: this test needs to be mocked
def awaitHttp(test)
  do
    let content = await http.get('http://www.fate-lang.org/')
    content like NonEmptyString | isOk
    test.done()
  end
end

export let tests = nodeunit.testCase({
  "Basic Do Functionality": basics,
  "'Do When' (Simple)": doWhenSimple,
  "'Do When' (No Dependencies)": doWhenNoDependencies,
  "'Do When' (Dependencies)": doWhenDependencies,
  "Await Any Functionality": awaitAny,
  "Await All Functionality": awaitAll,
  "Await HTTP Functionality": awaitHttp
})
