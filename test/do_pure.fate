import nodeunit
import http

from pattern import NonEmptyString
from test import wrap
from io import print, timeout

def basics(test)
  let { equalTo } = wrap(test)

  let x = do
    await timeout(200)
    'hello'
  end

  do
    await x | equalTo("hello")
    test.done()
  end
end

def doWhenSimple(test)
  let { equalTo } = wrap(test)

  do when t = 100
    t | equalTo(100)
    test.done()
  end
end

def doWhenNoDependencies(test)
  let { equalTo } = wrap(test)

  do when a = timeout(10), b = timeout(200), [c, d] = [90, 80]
    a | equalTo(10)
    b | equalTo(200)
    c | equalTo(90)
    d | equalTo(80)
    test.done()
  end
end

def doWhenDependencies(test)
  let { equalTo } = wrap(test)

  do when a = timeout(10), b = timeout(a * 20), [c, d] = [90, 80],
          e = timeout(30 * a), [f] = [c]
    a | equalTo(10)
    b | equalTo(200)
    c | equalTo(90)
    d | equalTo(80)
    e | equalTo(300)
    f | equalTo(90)
    test.done()
  end
end

def doWhenExpression(test)
  do when timeout(10): test.done()
end

def awaitDoWhenExpression(test)
  let { equalTo } = wrap(test)

  do
    await (do when timeout(10): 'hello') | equalTo('hello')
    test.done()
  end
end

def doWhenNested(test)
  let { equalTo } = wrap(test)

  do when a = timeout(10),
          b = do: a * 20
    a | equalTo(10)
    b | equalTo(200)
    test.done()
  end
end

def awaitAny(test)
  let { equalTo } = wrap(test)

  let arr = [
    for x in [100, 10, 50]
    select x | timeout
  ]

  do
    await any arr | equalTo(10)
    test.done()
  end
end

def awaitAnyMixed(test)
  let { equalTo } = wrap(test)

  let arr = [timeout(50), 100, 200, timeout(75)]
  do
    await any arr | equalTo(100)
    test.done()
  end
end

def awaitAll(test)
  let { deepEqualTo } = wrap(test)

  let arr = [
    for x in [100, 10, 50]
    select x | timeout
  ]

  do
    await all arr | deepEqualTo([100, 10, 50])
    test.done()
  end
end

def caseExpression(test)
  let { isOk, equalTo } = wrap(test)

  let z = timeout(5)

  do
    case x = timeout(10)
      print("should not happen")
      isOk(false)

    case timeout(20)
      print("should not happen")
      isOk(false)

    case z = timeout(5)
      isOk(true)
      z | equalTo(5)
      test.done()
  end
end

def casePropagate(test)
  let { equalTo } = wrap(test)

  let notHello = do
    await timeout(20)
    "not hello"
  end

  let caseTest = do
    case timeout(10)
      "hello"

    case notHello
      "should not be here"
  end

  do
    await caseTest | equalTo("hello")
    test.done()
  end
end

def caseOrdering(test)
  let { equalTo } = wrap(test)

  let result = do
    case 1: "first"
    case 2: "second"
    case 3: "third"
  end

  do
    await result | equalTo("first")
    test.done()
  end
end

def multipleWaiters(test)
  let { equalTo } = wrap(test)

  let eventually = timeout(100)
  do when a = eventually: a | equalTo(100)
  do when b = eventually: b | equalTo(100)

  do when c = eventually
    c | equalTo(100)
    do when timeout(10): test.done()
  end
end

export let tests = nodeunit.testCase({
  "Basic Do Functionality": basics,
  "'Do When' (Simple)": doWhenSimple,
  "'Do When' (No Dependencies)": doWhenNoDependencies,
  "'Do When' (Dependencies)": doWhenDependencies,
  "'Do When' (Expression)": doWhenExpression,
  "'Do When' (Await)": awaitDoWhenExpression,
  "'Do When' (Nested)": doWhenNested,
  "Await Any Functionality": awaitAny,
  "Await Any Functionality (Mixed)": awaitAnyMixed,
  "Await All Functionality": awaitAll,
  "Case Expression": caseExpression,
  "Case Propagation": casePropagate,
  "Case Proper Ordering": caseOrdering,
  "Multiple Waiters": multipleWaiters
})
