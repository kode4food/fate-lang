import nodeunit

from test import wrap

def assignment(test)
  let { equalTo } = wrap(test)

  let val1 = 100
  val1 | equalTo(100)

  let val1 = 200
  val1 | equalTo(200)

  def nested(x)
    val1 | equalTo(200)

    let val1 = val1 + x
    val1 - x | equalTo(200)

    if x > 50
      let val1 = 1000
    end
    val1
  end

  nested(25) | equalTo(225)
  nested(75) | equalTo(1000)
  val1 	     | equalTo(200)

  let val2 = "hello"
  val2 | equalTo("hello")

  if val1 = 200
    val2 | equalTo("hello")
    let val2 = val2 + ", there"
  else
    let val2 = val2 + ", you"
  end

  val2 | equalTo("hello, there")

  if val2 = "nope"
    let val2 = "never set"
  else
    val2 | equalTo("hello, there")
    if val1 != 200
      let val2 = "not set either"
    end
    val2 | equalTo("hello, there")

    let val2 = "final value"
    val2 | equalTo("final value")
  end

  val2 | equalTo("final value")

  test.done()
end

def testArrayDestructuring(test)
  let { equalTo } = wrap(test)

  let [a, b] = [1, 2]
  a | equalTo(1)
  b | equalTo(2)

  let [_, d, _, e] = [1, 2, 3, 4]
  d | equalTo(2)
  e | equalTo(4)

  test.done()
end

def testObjectDestructuring(test)
  let { equalTo } = wrap(test)

  let myObject = { name: 'Fate', age: 1 }
  myObject.name | equalTo('Fate')
  myObject.age  | equalTo(1)

  let {age, name} = myObject
  age  | equalTo(1)
  name | equalTo('Fate')

  let {age as a1, name as n1} = myObject
  a1 | equalTo(1)
  n1 | equalTo('Fate')

  let ge = 'ge', na = 'na'
  let { 'a' + ge as a2, na + 'me' as n2 } = myObject
  a2 | equalTo(1)
  n2 | equalTo('Fate')

  test.done()
end

export let tests = nodeunit.testCase({
  "Static Single Assignment": assignment,
  "Destructuring Array Assignment": testArrayDestructuring,
  "Destructuring Object Assignment": testObjectDestructuring
})
