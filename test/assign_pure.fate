import nodeunit

from test import equalTo

def assignment(test)
  let val1 = 100
  val1 | equalTo(100)

  let val1 = 200
  val1 | equalTo(200)

  def nested(x)
    val1 | equalTo(200)

    let val1 = val1 + x
    val1 - x | equalTo(200)

    if x > 50
      let val1 = 1000
    end
    val1
  end

  nested(25) | equalTo(225)
  nested(75) | equalTo(1000)
  val1 	     | equalTo(200)

  let val2 = "hello"
  val2 | equalTo("hello")

  if val1 = 200
    val2 | equalTo("hello")
    let val2 = val2 + ", there"
  else
    let val2 = val2 + ", you"
  end

  val2 | equalTo("hello, there")

  if val2 = "nope"
    let val2 = "never set"
  else
    val2 | equalTo("hello, there")
    if val1 != 200
      let val2 = "not set either"
    end
    val2 | equalTo("hello, there")

    let val2 = "final value"
    val2 | equalTo("final value")
  end

  val2 | equalTo("final value")

  test.done()
end

def testMutable(test)
  let a = mutable("there")
  "hello " + a.value | equalTo("hello there")

  a.set("you")
  "hello " + a.value | equalTo("hello you")

  test.done()
end

def testDestructuring(test)
  let [a, b] = [1, 2]
  a | equalTo(1)
  b | equalTo(2)

  test.done()
end

export let tests = nodeunit.testCase({
  "Static Single Assignment": assignment,
  "Mutable Wrapper Assignment": testMutable,
  "Destructuring Assignment": testDestructuring
})
