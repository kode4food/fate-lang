import nodeunit

from test import equalTo, deepEqualTo

def reduceStatementImplicit(test)
  let a = 50, b = 99

  reduce a
  for x in [1, 2, 3]
    let a = a + x
    let b = 20
  end

  a | equalTo(56)
  b | equalTo(99)
  test.done()
end

def reduceStatementExplicit(test)
  let a = 50, b = 99

  reduce a = 0
  for x in [1, 2, 3]
    let a = a + x
    let b = 20
  end

  a | equalTo(6)
  b | equalTo(99)
  test.done()
end

def multiReduceStatementExplicit(test)
  reduce a = 0, b = 2
  for x in [1, 2, 3]
    let a = a + x
    let b = b * x
  end

  a | equalTo(6)
  b | equalTo(12)
  test.done()
end

def reduceStatementsInLambda(test)
  let sum = (values ->
    reduce x = 0
    for value in values
      let x = x + value
    end
  )

  let multi = (values ->
    reduce a = 0, b = 2
    for x in [1, 2, 3]
      let a = a + x
      let b = b * x
    end
  )

  sum([1,2,3])   | equalTo(6)
  multi([1,2,3]) | deepEqualTo([6, 12])
  test.done()
end

def reduceExpressionImplicit(test)
  let a = 5
  let result = reduce a for x in [1,2,3] select a + x

  result | equalTo(11)
  a 	   | equalTo(5)  # var shouldn't leak
  test.done()
end

def reduceExpressionExplicit(test)
  let result = reduce a = 0 for x in [1,2,3] select a + x
  reduce b = 0 for x in [4,5,6] select b + x

  result | equalTo(6)
  a      | equalTo(node.undefined)  # var shouldn't leak
  b      | equalTo(node.undefined)  # var shouldn't leak
  test.done()
end

export let tests = nodeunit.testCase({
  "Implicit Reduce Statement": reduceStatementImplicit,
  "Explicit Reduce Statement": reduceStatementExplicit,
  "Reduce Statements In Lambda": reduceStatementsInLambda,
  "Explicit Multi-Reduce Statement": multiReduceStatementExplicit,
  "Implicit Reduce Expression": reduceExpressionImplicit,
  "Explicit Reduce Expression": reduceExpressionExplicit
})
