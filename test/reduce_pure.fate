import nodeunit

from test import wrap
from value import undefined

def reduceStatementImplicit(test)
  let { equalTo } = wrap(test)

  let a = 50, b = 99

  reduce a
  for x in [1, 2, 3]
    let a = a + x
    let b = 20
  end

  a | equalTo(56)
  b | equalTo(99)
  test.done()
end

def reduceStatementExplicit(test)
  let { equalTo } = wrap(test)

  let a = 50, b = 99

  reduce a = 0
  for x in [1, 2, 3]
    let a = a + x
    let b = 20
  end

  a | equalTo(6)
  b | equalTo(99)
  test.done()
end

def multiReduceStatementExplicit(test)
  let { equalTo } = wrap(test)

  reduce [a, b] = [0, 2]
  for x in [1, 2, 3]
    let a = a + x
    let b = b * x
  end

  a | equalTo(6)
  b | equalTo(12)
  test.done()
end

def reduceStatementsInLambda(test)
  let { equalTo, deepEqualTo } = wrap(test)

  let sum = (values ->
    reduce x = 0
    for value in values
      let x = x + value
    end
  )

  let multi = (values ->
    reduce a = 0, b = 2
    for x in [1, 2, 3]
      let a = a + x
      let b = b * x
    end
  )

  [1, 2, 3] | sum   | equalTo(6)
  [1, 2, 3] | multi | deepEqualTo([6, 12])

  test.done()
end

def reduceExpressionImplicit(test)
  let { equalTo } = wrap(test)

  let a = 5
  let result = reduce a for x in [1,2,3] select a + x

  result | equalTo(11)
  a 	   | equalTo(5)  # var shouldn't leak
  test.done()
end

def reduceExpressionExplicit(test)
  let { equalTo } = wrap(test)

  let result = reduce a = 0 for x in [1, 2, 3] select a + x
  reduce b = 0 for x in [4, 5, 6] select b + x

  result | equalTo(6)
  test.done()
end

export let tests = nodeunit.testCase({
  "Implicit Reduce Statement": reduceStatementImplicit,
  "Explicit Reduce Statement": reduceStatementExplicit,
  "Reduce Statements In Lambda": reduceStatementsInLambda,
  "Explicit Multi-Reduce Statement": multiReduceStatementExplicit,
  "Implicit Reduce Expression": reduceExpressionImplicit,
  "Explicit Reduce Expression": reduceExpressionExplicit
})
