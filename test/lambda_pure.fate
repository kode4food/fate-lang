import nodeunit

def lambdas(test)
  let lambda1 = (x, y -> x + y)
  let lambda2 = (x -> x * 2)
  let lambda3 = (x -> [for y in x where y > 50 select y * 3])

  test.equals(lambda1(70, 80), 150)
  test.equals(lambda2(100), 200)
  test.deepEqual(lambda3([5, 25, 70, 200]), [210, 600])
  test.done()
end

def rolledUpLoops(test)
  let filtered = (values ->
    [for value in values where value < 50]
  )

  let sum = (values ->
    reduce result = 0
    for value in values
    select result + value
  )

  test.deepEqual(filtered([10, 20, 70, 30]), [10, 20, 30])
  test.equals(sum([1, 2, 3]), 6)
  test.done()
end

def fatLambdas(test)
  let lambda1 = (x, y ->
    let r = x + y
    r * x * y)

  let lambda2 = (
    x, y -> let r = x + y
    r * x * y
  )

  test.equals(lambda1(70, 80), 840000)
  test.equals(lambda2(40, 50), 180000)
  test.done()
end

def curryTest(test)
	let lambda1 = (x, y -> x + y)
	let curry = lambda1(5, ?)
	test.equals(curry(5), 10)

	let lambda2 = (a, b, c -> a + b + c)

	let curry1 = lambda2(1, ?, ?)
	test.equals(curry1(2, 3), 6)

	let  curry2 = curry1(2, ?)
	test.equals(curry2(3), 6)
	test.done()
end

let tests = nodeunit.testCase({
  "Lambdas Expressions": lambdas,
  "Rolled Up Loops": rolledUpLoops,
  "Fat Lambda Expressions": fatLambdas,
  "Lambda currying": curryTest
})

export tests
