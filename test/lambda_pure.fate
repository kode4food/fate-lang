import nodeunit

from test import wrap

def lambdas(test)
  let { equalTo, deepEqualTo } = wrap(test)

  let lambda1 = x -> [for y in x where y > 50 select y * 3],
      lambda2 = x → x • 2,
      lambda3 = (x, y → x + y)

  lambda1([5, 25, 70, 200]) | deepEqualTo([210, 600])
  lambda2(100) 	            | equalTo(200)
  lambda3(70, 80)           | equalTo(150)

  test.done()
end

def rolledUpLoops(test)
  let { equalTo, deepEqualTo } = wrap(test)

  let maybe_filtered = (filtered, values ->
    if filtered
      [for nothing in "ignored"]
      [for value in values where value < 50]
    else
      [for value in values]
    end
  )

  let filtered = maybe_filtered(true, _)
  let unfiltered = maybe_filtered(false, _)

  let sum = (values ->
    reduce result = 0
    for value in values
    select result + value
  )

  filtered([10, 20, 70, 30]) | deepEqualTo([10, 20, 30])
  unfiltered([1, 50, 100])   | deepEqualTo([1, 50, 100])
  sum([1, 2, 3])             | equalTo(6)

  test.done()
end

def fatLambdas(test)
  let { equalTo } = wrap(test)

  let lambda1 = (x, y ->
    let r = x + y
    r * x * y)

  let lambda2 = (
    x, y -> let r = x + y
    r * x * y
  )

  lambda1(70, 80) | equalTo(840000)
  lambda2(40, 50) | equalTo(180000)
  test.done()
end

def curryTest(test)
  let { equalTo } = wrap(test)

	let lambda1 = (x, y -> x + y)
	let curry = lambda1(5, _)
	curry(5) | equalTo(10)

	let lambda2 = (a, b, c -> a + b + c)

	let curry1 = lambda2(1, _, _)
	curry1(2, 3) | equalTo(6)

	let  curry2 = curry1(2, _)
	curry2(3) | equalTo(6)

	test.done()
end

let tests = nodeunit.testCase({
  "Lambdas Expressions": lambdas,
  "Rolled Up Loops": rolledUpLoops,
  "Fat Lambda Expressions": fatLambdas,
  "Lambda currying": curryTest
})

export tests
