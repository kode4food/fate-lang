import nodeunit

from pattern import Nothing, Something
from test import isFalse, isTrue

let null = node.null, undefined = node.undefined

import '../dist/Types' as types
import '../dist/Runtime' as runtime

def trueFalse(test)
  types.isTrue(Nothing)           | isFalse
  types.isTrue(Something)         | isTrue
  types.isTrue(null)              | isFalse
  types.isTrue(undefined)         | isFalse
  types.isTrue()                  | isFalse
  types.isTrue([])                | isTrue
  types.isTrue({})                | isTrue
  types.isTrue({ name: 'fate' })  | isTrue
  types.isTrue("hello")           | isTrue
  types.isTrue([1])               | isTrue
  types.isFalse(Nothing)          | isTrue
  types.isFalse()                 | isTrue
  types.isFalse([])               | isFalse
  types.isFalse({})               | isFalse
  types.isFalse({ name: 'fate' }) | isFalse
  types.isFalse("hello")          | isFalse
  types.isFalse([1])              | isFalse
  test.done()
end

def somethingNothing(test)
  runtime.isSomething(null)      | isFalse
  runtime.isSomething(undefined) | isFalse
  runtime.isSomething(Something) | isTrue
  runtime.isSomething("hello")   | isTrue
  runtime.isSomething(false)     | isTrue
  runtime.isNothing(null)        | isTrue
  runtime.isNothing(undefined)   | isTrue
  runtime.isNothing(Nothing)     | isTrue
  runtime.isNothing("hello")     | isFalse
  runtime.isNothing(false)       | isFalse
  test.done()
end

export let tests = nodeunit.testCase({
  "True / False": trueFalse,
  "Something / Nothing": somethingNothing
})
