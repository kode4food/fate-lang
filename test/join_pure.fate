import nodeunit

def joinPatternTest(test)
  test.expect(11)

  when a({ value: 'another' } as x, y) & b(g, h)
    x.type = 'Not'      | test.ok
    x.value = 'another' | test.ok
    y = 'goodbye'       | test.ok
    g = 'you'           | test.ok
    h = 40              | test.ok
  end

  when a({ type: 'Test' } as x, y) & b(g, self > 50 as h)
    x.type = 'Test'    | test.ok
    x.value = 'aValue' | test.ok
    y = 'hello'        | test.ok
    g = 'there'        | test.ok
    h = 99             | test.ok
  end

  (() -> a({ non: 'exhaustive' })) | test.throws
  timeout( () -> a({ type: 'Test', value: 'aValue'}, 'hello'),  10 )
  timeout( () -> b('there', 99), 20 )
  timeout( () -> a({ type: 'Not', value: 'another' }, 'goodbye'),  30 )
  timeout( () -> b('you', 40),  40 )
  timeout( () -> b('there', 120), 60 )
  timeout( () -> test.done(), 100)
end

let tests = nodeunit.testCase({
  "Pattern-driven Join Evaluation": joinPatternTest
})

export tests
