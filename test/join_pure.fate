import nodeunit

def joinPatternTest(test)
  test.expect(11)

  when a({ value: 'another' } as x, y) & b(g, h)
    x.type = 'Not'      | test.ok
    x.value = 'another' | test.ok
    y = 'goodbye'       | test.ok
    g = 'you'           | test.ok
    h = 40              | test.ok
  end

  when a({ type: 'Test' } as x, y) & b(g, self > 50 as h)
    x.type = 'Test'    | test.ok
    x.value = 'aValue' | test.ok
    y = 'hello'        | test.ok
    g = 'there'        | test.ok
    h = 99             | test.ok
  end

  (-> a({ non: 'exhaustive' })) | test.throws
  timeout(10, -> a({ type: 'Test', value: 'aValue'}, 'hello'))
  timeout(20, -> b('there', 99))
  timeout(30, -> a({ type: 'Not', value: 'another' }, 'goodbye'))
  timeout(40, -> b('you', 40))
  timeout(60, -> b('there', 120))

  timeout(100, -> # testing multi-line parse
    test.done()
  )
end

export let tests = nodeunit.testCase({
  "Pattern-driven Join Evaluation": joinPatternTest
})
