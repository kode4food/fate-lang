import nodeunit

def joinPatternTest(test)
  test.expect(16)

  when a({ value: 'another' } as x, y) & b(g, h)
    x.type in ['Not', 'Yet']      | test.ok
    x.value = 'another'           | test.ok
    y in ['goodbye1', 'goodbye2'] | test.ok
    g in ['you', 'there']         | test.ok
    h in [40, 120]                | test.ok
  end

  when a({ type: 'Test' } as x, y) & b(g, self > 50 as h)
    x.type = 'Test'    | test.ok
    x.value = 'aValue' | test.ok
    y = 'hello'        | test.ok
    g = 'there'        | test.ok
    h = 99             | test.ok
  end

  (-> a({ non: 'exhaustive' })) | test.throws                      # none
  timeout(10, -> a({ type: 'Test', value: 'aValue'}, 'hello'))     # 1
  timeout(20, -> b('there', 99))                                   # 1, 2
  timeout(30, -> a({ type: 'Not', value: 'another' }, 'goodbye1')) # 1, 2
  timeout(40, -> b('you', 40))                                     # 1
  timeout(60, -> b('there', 120))                                  # 1, 2
  timeout(70, -> a({ type: 'Yet', value: 'another' }, 'goodbye2')) # 1

  timeout(100, -> # testing multi-line parse
    test.done()
  )
end

export let tests = nodeunit.testCase({
  "Pattern-driven Join Evaluation": joinPatternTest
})
