import nodeunit

def guardOnly(test)
  def testFunc(x) where x > 10
    x * 10
  end

  testFunc(12)        | test.equal(?, 120)
  (() -> testFunc(9)) | test.throws
  test.done()
end

def guardAndDefault(test)
  def testFunc(x)
    x * 5
  end

  def testFunc(self > 5 as x) where x > 10
    x * 10
  end

  testFunc(12) | test.equal(?, 120)
  testFunc(9)  | test.equal(?, 45)
  test.done()
end

def noArguments(test)
  let a = 99

  def testFunc
    'fell through'
  end

  def testFunc where a = 99
    'guard worked'
  end

  test.equal(testFunc(), 'guard worked')
  test.done()
end

let tests = nodeunit.testCase({
  "Functions with Guards Only": guardOnly,
  "Functions with Guard and Default": guardAndDefault,
  "Functions with No Arguments": noArguments
})

export tests
