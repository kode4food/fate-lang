import nodeunit

from test import wrap

def guardOnly(test)
  let { equalTo, throws } = wrap(test)

  def testFunc(x) where x > 10
    x * 10
  end

  testFunc(12)     | equalTo(120)
  (-> testFunc(9)) | throws
  test.done()
end

def guardAndDefault(test)
  let { equalTo } = wrap(test)

  def testFunc(x)
    x * 5
  end

  def testFunc(self > 5 as x) where x > 10
    x * 10
  end

  testFunc(12) | equalTo(120)
  testFunc(9)  | equalTo(45)
  test.done()
end

def anonymousPatternArgument(test)
  let { equalTo } = wrap(test)

  def testFunc(x)
    x * 5
  end

  def testFunc(self > 5)
    "hello"
  end

  testFunc(5) | equalTo(25)
  testFunc(6) | equalTo('hello')
  test.done()
end

def noArguments(test)
  let { equalTo } = wrap(test)

  let a = 99

  def testFunc
    'fell through'
  end

  def testFunc where a = 99
    'guard worked'
  end

  testFunc() | equalTo('guard worked')
  test.done()
end

def badCompose(test)
  let { throws } = wrap(test)
  (-> "hello" and| ~{ name: 'Lionel' }) | throws
  test.done()
end

export let tests = nodeunit.testCase({
  "Functions with Guards Only": guardOnly,
  "Functions with Guard and Default": guardAndDefault,
  "Functions with Anonymous Patterns": anonymousPatternArgument,
  "Functions with No Arguments": noArguments,
  "Functions that don't Compose": badCompose
})
