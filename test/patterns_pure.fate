import nodeunit

from pattern
import Array, Object, String, NonEmptyString, EmptyString,
       Boolean, Number, Integer, PositiveInteger, PositiveNumber,
       NegativeInteger, NegativeNumber, ArrayOf, Nothing

from test import wrap
from value import null, undefined

def numberPatterns(test)
  let { isFalse, isTrue } = wrap(test)

  "hello" like Number         | isFalse
  "hello" not like Number     | isTrue
  99.6 like Number            | isTrue
  99.6 not like Number        | isFalse
  {} like Number              | isFalse
  {} not like Number          | isTrue
  Nothing like Number         | isFalse
  Nothing not like Number     | isTrue

  99.6 like Integer           | isFalse
  99.6 not like Integer       | isTrue
  99 like Integer             | isTrue
  99 not like Integer         | isFalse

  -99 like PositiveInteger    | isFalse
  99.6 like PositiveInteger   | isFalse
  0 like PositiveInteger      | isFalse
  -99 like NegativeInteger    | isTrue
  -99.6 like NegativeInteger  | isFalse
  0 like NegativeInteger      | isFalse

  99.6 like PositiveNumber    | isTrue
  99 like PositiveNumber      | isTrue
  -99 like PositiveNumber     | isFalse
  0 like PositiveNumber       | isFalse
  -99.6 like NegativeNumber   | isTrue
  -99 like NegativeNumber     | isTrue
  99 like NegativeNumber      | isFalse
  0 like NegativeNumber       | isFalse

	test.done()
end

def stringPatterns(test)
  let { isFalse, isTrue } = wrap(test)

  "" like String              | isTrue
  "" not like String          | isFalse
  "hello" like String         | isTrue
  "" like NonEmptyString      | isFalse
  "" like EmptyString         | isTrue
  "hello" like EmptyString    | isFalse
  "hello" like NonEmptyString | isTrue
  99 like String              | isFalse
  99 not like String          | isTrue
  {} like String              | isFalse
  [] like EmptyString         | isFalse
  null like String            | isFalse
  null not like String        | isTrue

  test.done()
end

def booleanPatterns(test)
  let { isFalse, isTrue } = wrap(test)

  true like Boolean    | isTrue
  false like Boolean   | isTrue
  "" like Boolean      | isFalse
  "hello" like Boolean | isFalse
  99 like Boolean      | isFalse
  {} like Boolean      | isFalse
  [] like Boolean      | isFalse
  null like Boolean    | isFalse

  test.done()
end

def objectPatterns(test)
  let { isFalse, isTrue } = wrap(test)

  { name: 'Bill', age: 30 } like ~{ name: String, age: _ } | isTrue
  { name: 'Bill' } like ~{ name: String, age: _ }          | isFalse

  true like Object    | isFalse
  false like Object   | isFalse
  "" like Object      | isFalse
  "hello" like Object | isFalse
  99 like Object      | isFalse
  {} like Object      | isTrue
  [] like Object      | isFalse
  null like Object    | isFalse

  test.done()
end

def definedPatterns(test)
  let { isFalse, isTrue } = wrap(test)

  let Color = ~(it in ['red', 'green', 'blue'])

  let Person = ~{
    firstName: NonEmptyString,
    lastName: NonEmptyString,
    age: PositiveInteger,
    address: NonEmptyString,
    postalCode: PositiveInteger,
    colors: ArrayOf(Color)
  }

  let trueObj = {
    firstName: 'Bill',
    lastName: 'Murray',
    age: 78,
    address: "123 Main Street",
    postalCode: 90210,
    colors: ['red', 'blue']
  }

  let falseObj = {
    notWorking: true
  }

  trueObj like Person  | isTrue
  falseObj like Person | isFalse
  trueObj like Person  | isTrue   # still true?

  test.done()
end

def arrayPatterns(test)
  let { isFalse, isTrue } = wrap(test)

  [1, 2, 3, 4] like ~[1, 2, 3] | isTrue
  [1, 2, 3] like ~[1, 2, 3, 4] | isFalse
  [1, 2, 3] like ~[1, 2, 3, _] | isFalse
  [1, 2, 3] like ~[1, _, 3]    | isTrue

  true like Array    | isFalse
  false like Array   | isFalse
  "" like Array      | isFalse
  "hello" like Array | isFalse
  99 like Array      | isFalse
  {} like Array      | isFalse
  [] like Array      | isTrue
  null like Array    | isFalse

  let IntegerArray = ArrayOf(Integer).MinLength(1)
  let BadArray = ArrayOf("hello")

  [1,2,3] like IntegerArray  | isTrue
  [1.2, 3] like IntegerArray | isFalse
  ['hi'] like IntegerArray   | isFalse
  [] like IntegerArray       | isFalse
  'hi' like IntegerArray     | isFalse

  # Test with pipe operator as well
  [1,2,3]  | IntegerArray | isTrue
  [1.2, 3] | IntegerArray | isFalse
  ['hi']   | IntegerArray | isFalse
  []       | IntegerArray | isFalse
  'hi'     | IntegerArray | isFalse

  ['hi'] like BadArray | isTrue
  [] like BadArray     | isTrue
  'hi' like BadArray   | isFalse

  let limitedArray = ArrayOf(Integer).MinLength(1).MaxLength(5)

  []                 like limitedArray | isFalse
  [1, 2, 3]          like limitedArray | isTrue
  [1, 2, 3, 4, 5]    like limitedArray | isTrue
  [1, 2, 3, 4, 5, 6] like limitedArray | isFalse
  [1, 2, 3, 4.4, 5]  like limitedArray | isFalse

  test.done()
end

def combinedPatterns(test)
  let { isTrue, isFalse } = wrap(test)

  let Primate = ~{ kingdom: 'Animalia', class: 'Mammalia', order: 'Primate' },
      Monkey = ~{ infraorder: 'Simiiformes' } && Primate,
      Tarsier = ~{ infraorder: 'Tarsiiformes' } && Primate,
      MonkeyOrTarsier = Monkey || Tarsier,
      FourAsses = ~{ asses: 4 },
      MonkeyWithFourAsses = Monkey && FourAsses

  let monkey1 = {
    kingdom: 'Animalia',
    class: 'Mammalia',
    order: 'Primate',
    infraorder: 'Simiiformes',
    asses: 1
  }

  let monkey2 = {
    kingdom: 'Animalia',
    class: 'Mammalia',
    order: 'Primate',
    infraorder: 'Simiiformes',
    asses: 4
  }

  let tarsier1 = {
    kingdom: 'Animalia',
    class: 'Mammalia',
    order: 'Primate',
    infraorder: 'Tarsiiformes',
    asses: 1
  }

  let tarsier2 = {
    kingdom: 'Animalia',
    class: 'Mammalia',
    order: 'Primate',
    infraorder: 'Tarsiiformes',
    asses: 4
  }

  monkey1 like Primate              | isTrue
  monkey2 like Primate              | isTrue
  tarsier1 like Primate             | isTrue
  tarsier2 like Primate             | isTrue
  "fred" like Primate               | isFalse

  monkey1 like Monkey               | isTrue
  monkey2 like Monkey               | isTrue
  tarsier1 like Monkey              | isFalse
  tarsier2 like Monkey              | isFalse
  "fred" like Monkey                | isFalse

  monkey1 like Tarsier              | isFalse
  monkey2 like Tarsier              | isFalse
  tarsier1 like Tarsier             | isTrue
  tarsier2 like Tarsier             | isTrue
  "fred" like Tarsier               | isFalse

  monkey1 like FourAsses            | isFalse
  monkey2 like FourAsses            | isTrue
  tarsier1 like FourAsses           | isFalse
  tarsier2 like FourAsses           | isTrue
  "fred" like FourAsses             | isFalse

  monkey1 like MonkeyWithFourAsses  | isFalse
  monkey2 like MonkeyWithFourAsses  | isTrue
  tarsier1 like MonkeyWithFourAsses | isFalse
  tarsier2 like MonkeyWithFourAsses | isFalse
  "fred" like MonkeyWithFourAsses   | isFalse

  monkey1 like MonkeyOrTarsier      | isTrue
  monkey2 like MonkeyOrTarsier      | isTrue
  tarsier1 like MonkeyOrTarsier     | isTrue
  tarsier2 like MonkeyOrTarsier     | isTrue
  "fred" like MonkeyOrTarsier       | isFalse

  test.done()
end

def tersePatterns(test)
  let { isTrue, isFalse } = wrap(test)

  let Primate = ~{ .kingdom='Animalia', .class='Mammalia', .order='Primate' },
      Monkey = ~{ it like Primate and .infraorder='Simiiformes' },
      FourAsses = ~{ asses: 4 },
      MonkeyWithFourAsses = ~{ it like Monkey, it like FourAsses }

  let monkey1 = {
    kingdom: 'Animalia',
    class: 'Mammalia',
    order: 'Primate',
    infraorder: 'Simiiformes',
    asses: 1
  }

  let monkey2 = {
    kingdom: 'Animalia',
    class: 'Mammalia',
    order: 'Primate',
    infraorder: 'Simiiformes',
    asses: 4
  }

  let tarsier1 = {
    kingdom: 'Animalia',
    class: 'Mammalia',
    order: 'Primate',
    infraorder: 'Tarsiiformes',
    asses: 1
  }

  let tarsier2 = {
    kingdom: 'Animalia',
    class: 'Mammalia',
    order: 'Primate',
    infraorder: 'Tarsiiformes',
    asses: 4
  }

  monkey1 like Primate              | isTrue
  monkey2 like Primate              | isTrue
  tarsier1 like Primate             | isTrue
  tarsier2 like Primate             | isTrue
  "fred" like Primate               | isFalse

  monkey1 like Monkey               | isTrue
  monkey2 like Monkey               | isTrue
  tarsier1 like Monkey              | isFalse
  tarsier2 like Monkey              | isFalse
  "fred" like Monkey                | isFalse

  monkey1 like FourAsses            | isFalse
  monkey2 like FourAsses            | isTrue
  tarsier1 like FourAsses           | isFalse
  tarsier2 like FourAsses           | isTrue
  "fred" like FourAsses             | isFalse

  monkey1 like MonkeyWithFourAsses  | isFalse
  monkey2 like MonkeyWithFourAsses  | isTrue
  tarsier1 like MonkeyWithFourAsses | isFalse
  tarsier2 like MonkeyWithFourAsses | isFalse
  "fred" like MonkeyWithFourAsses   | isFalse

  test.done()
end

def matchExpression(test)
  let { equalTo, throws } = wrap(test)

  let result = match 42
    it > 50  : "over 50"
    it < 40  : "under 40"
    42       : "42 exactly"
    it >= 40 : "over 40"
  end

  result | equalTo("42 exactly")

  match 42
    41   : "forty one"
    43   : "forty three"
    else : "nope"
  end | equalTo("nope")

  (-> match 42
    41: "won't happen"
    43: "won't happen"
  end) | throws

  42 | match
    41: "forty one"
    42: "forty two"
  end | equalTo("forty two")

  test.done()
end
def rollUpPatterns(test)
  let { isTrue, isFalse } = wrap(test)

  let p = ~{
    city: ~(it != 'Boston')
  }

  let good = {
    name: 'Bill',
    city: 'Phoenix'
  }

  let bad = {
    name: 'Bill',
    city: 'Boston'
  }

  good like p | isTrue
  bad like p  | isFalse
  test.done()
end

def doNotRollUpPatterns(test)
  let { isTrue, isFalse } = wrap(test)

  let p = ~{
    .name like NonEmptyString,

    address: {
      city: it like ~(it != 'Boston')
    }
  }

  let good = {
    name: 'Bill',
    address: {
      street: '123 Main',
      city: 'Phoenix'
    }
  }

  let bad = {
    name: 'Bill',
    address: {
      street: '123 Main',
      city: 'Boston'
    }
  }

  good like p | isTrue
  bad like p  | isFalse
  test.done()
end

export let tests = nodeunit.testCase({
	"Numbers":  numberPatterns,
  "Strings":  stringPatterns,
  "Boolean":  booleanPatterns,
  "Objects":  objectPatterns,
  "Defined":  definedPatterns,
  "Arrays":   arrayPatterns,
  "Combined": combinedPatterns,
  "Terse":    tersePatterns,
  "Match":    matchExpression,
  "Roll-Up", rollUpPatterns,
  "No Roll-Up":  doNotRollUpPatterns
})
