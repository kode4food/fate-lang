import nodeunit

from pattern
import Array, Object, String, NonEmptyString, EmptyString,
       Boolean, Number, Integer, PositiveInteger, PositiveNumber,
       NegativeInteger, NegativeNumber, ArrayOf

from test import isFalse, isTrue, equalTo, throws

let null = node.null, undefined = node.undefined

def numberPatterns(test)
  "hello" like Number         | isFalse
  99.6 like Number            | isTrue
  {} like Number              | isFalse
  Nothing like Number         | isFalse

  99.6 like Integer           | isFalse
  99 like Integer             | isTrue

  -99 like PositiveInteger    | isFalse
  99.6 like PositiveInteger   | isFalse
  0 like PositiveInteger      | isFalse
  -99 like NegativeInteger    | isTrue
  -99.6 like NegativeInteger  | isFalse
  0 like NegativeInteger      | isFalse

  99.6 like PositiveNumber    | isTrue
  99 like PositiveNumber      | isTrue
  -99 like PositiveNumber     | isFalse
  0 like PositiveNumber       | isFalse
  -99.6 like NegativeNumber   | isTrue
  -99 like NegativeNumber     | isTrue
  99 like NegativeNumber      | isFalse
  0 like NegativeNumber       | isFalse

	test.done()
end

def stringPatterns(test)
  "" like String              | isTrue
  "hello" like String         | isTrue
  "" like NonEmptyString      | isFalse
  "" like EmptyString         | isTrue
  "hello" like EmptyString    | isFalse
  "hello" like NonEmptyString | isTrue
  99 like String              | isFalse
  {} like String              | isFalse
  [] like EmptyString         | isFalse
  null like String            | isFalse

  test.done()
end

def booleanPatterns(test)
  true like Boolean    | isTrue
  false like Boolean   | isTrue
  "" like Boolean      | isFalse
  "hello" like Boolean | isFalse
  99 like Boolean      | isFalse
  {} like Boolean      | isFalse
  [] like Boolean      | isFalse
  null like Boolean    | isFalse

  test.done()
end

def objectPatterns(test)
  true like Object    | isFalse
  false like Object   | isFalse
  "" like Object      | isFalse
  "hello" like Object | isFalse
  99 like Object      | isFalse
  {} like Object      | isTrue
  [] like Object      | isFalse
  null like Object    | isFalse

  test.done()
end

def arrayPatterns(test)
  true like Array    | isFalse
  false like Array   | isFalse
  "" like Array      | isFalse
  "hello" like Array | isFalse
  99 like Array      | isFalse
  {} like Array      | isFalse
  [] like Array      | isTrue
  null like Array    | isFalse

  let IntegerArray = ArrayOf(Integer).MinLength(1)
  let BadArray = ArrayOf("hello")

  [1,2,3] like IntegerArray  | isTrue
  [1.2, 3] like IntegerArray | isFalse
  ['hi'] like IntegerArray   | isFalse
  [] like IntegerArray       | isFalse
  'hi' like IntegerArray     | isFalse

  # Test with pipe operator as well
  [1,2,3]  | IntegerArray | isTrue
  [1.2, 3] | IntegerArray | isFalse
  ['hi']   | IntegerArray | isFalse
  []       | IntegerArray | isFalse
  'hi'     | IntegerArray | isFalse

  ['hi'] like BadArray | isTrue
  [] like BadArray     | isTrue
  'hi' like BadArray   | isFalse

  test.done()
end

def matchExpression(test)
  let result = match 42
    self > 50  : "over 50"
    self < 40  : "under 40"
    42         : "42 exactly"
    self >= 40 : "over 40"
  end

  result | equalTo("42 exactly")

  match 42
    41   : "forty one"
    43   : "forty three"
    else : "nope"
  end | equalTo("nope")

  (-> match 42
    41: "won't happen"
    43: "won't happen"
  end) | throws

  42 | match
    41: "forty one"
    42: "forty two"
  end | equalTo("forty two")

  test.done()
end

export let tests = nodeunit.testCase({
	"Numbers": numberPatterns,
  "Strings": stringPatterns,
  "Boolean": booleanPatterns,
  "Objects": objectPatterns,
  "Arrays": arrayPatterns,
  "Match": matchExpression
})
